clear 清屏 （快捷键 ctrl + L）
reboot 重启
poweroff 关机
shutdown -h now 正常关机 -c 取消关机
halt 关闭内存，强制关机
cd 打开目录
pwd 显示当前的目录信息


ls ：
显示该目录下所有文件
文件下：
蓝色表示该文件是目录（/)
黑色表示为普通文件
草绿色表示为可执行文件（*）
淡蓝色表示为链接文件（快捷方式）（@）

ls -F 显示所有文件的属性，即括号内的标志
ls -a 显示所有文件，包括隐藏文件，隐藏文件前面有.表示
ls -l 显示查看文件的各种属性，从左到右分别是，文件的权限标志，文件的链接个数，文件所有者的用户名，该用户所在的用户组组名，文件的大小，最后一次被修改的日期，最后一次被修改的时间，文件名
ls -h 可读性更高的形式显示

dir： 
windows下常用，linux也可以用，功能和ls类似，只是比ls的功能更少，不能标明每个文件的类型
vdir 与ls -l作用类似

/ 表示主目录
home home目录，里面是用户信息
~ 用户主目录,里面是用户下配置的文件，如桌面，下载等文件或目录

cat:
用于查看文件内容，通常为文本文件，后跟文件名作为参数，类似于读取文本文件
cat后可以跟多个文件，一起读取，从前到后依次读取
cat -n 为文本文件内容配置行数，便于读取，在每一行前面显示行号

more 用于读取长文件内容，最后显示已读百分比，回车键表示向下滚动一行，Q表示退出阅读
head 用于阅读内容的前几行，与-n 搭配，后面跟阅读的行数，再加阅读的文件名
tail 用于阅读内容的后几行，与head类似，如 tail -n 2 yum.conf -f 查看动态变化，主要用于查看日志变化。
less 与more功能类似，并且更强大，可以使用光标键在文本文件中前后滚屏，用行号或百分号作为书签浏览文件，进行复杂的检索等功能
less -M 显示更多的文件信息，输出底部显示这个文件的名字，当前页码，总得页码以及当前位置在整个文件中的位置百分比数值。

grep:
查找文件内容，查找文件中包含某些信息的一行，如grep un day

find:
迅速在指定范围内查找到文件，find命令需要一个路径名作为查找范围，需要-name之后指定查找的文件名称，需要-print表示在显示器上显示出来，也可以指定-type需要查找的文件类型，通常表示方法为 find /etc/bin -name yum.conf -type d -print
type 种类以及表示方法：
b 块设备文件
c 字符设备文件
d 目录文件
f 普通文件
p 命名管道
l 符号链接
还可以通过指定时间来指导find命令查找文件，如-atime n用来查找最后一次使用在n天前的文件，而-mtime n表示查找最后一次修改在n天前的文件,通常用+n表示大于n，-n表示小于n,如 find . -type f -mtime -1 -print

locate:
当用户完全不记得自己的文件放在哪里了，则可以用此命令，只要输入命令加上文件名或文件名的一部分，就可以查找出该文件的路径，如locate *.doc

从终端运行程序：
即直接输入程序名称即可，也可以在命令后加上&，表示程序在后端运行

whereis:
主要用于查找程序文件，并提供这个文件的二进制可执行文件、源代码文件和使用手册页存放的位置，例如查找find命令：whereis find,也可以设置寻找文件的种类限制，如只寻找二进制可执行文件，即 whereis -b find

用户及版本信息查看：
who:
查看当前系统中有哪些人登录以及在哪个控制台上
whoami:
查看自己是以什么身份登录到系统
uname:
查看当前系统的版本信息，-a表示全部显示，-r表示只显示内核版本信息
netstat:
查看网络连接信息 netstat -tnlp -t表示列出tcp协议的连接 -n:将地址从字母组合转化成ip地址，将协议转化为端口号来显示（提高可读性） -l:表示过滤出”state(状态）“列出其中值为LISTEN（监听）的连接 -p:显示发起连接的进程名称和pid

man:
获取某个命令的帮助信息，即man find

获取命令信息：
whatis：
从程序的使用手册中抽出一行简单的介绍性文字，帮助用户了解该程序的大致用途，如whatis find
apropos:
通过使用手册反查到某个命令，即想要进行一个动作，但是不知道是什么命令时用，即apropos search

文件管理：

新建文件：
mkdir：
一次建立一个或几个目录，可以使用相对路径或者绝对路径，如mkdir ~/picture/temp
如果其中一个路径不存在，则会提示错误，因此可以设置-p表示完整的创建一个子目录结构
touch:
新建一个空文件（不含有任何内容的文件），用于缺少某个文件无法启动但该文件又不是那么重要时，充数，还有一个作用，即touch 现有的目录或文件 更新该文件的建立时间，如touch picture.

移动、复制和删除：
mv:
移动文件或目录 如果目的地中有同名文件或目录，则会自动覆盖，设置 -i表示会提示是否覆盖，设置 -b表示自动在同名文件的文件名后面加一个“~”进行区分，重命名即将同一个文件在同一个目录中移动，如mv hello hello_bak

cp:
复制目录和文件，默认情况下会自动覆盖同名文件或目录，设置-i会进行提示，设置-b会自动在同名文件的文件名后增加“~”其复制的时候会自动跳过目录，设置-r时会将子目录连同其中的文件一起复制到另一个目录中。

rmdir/rm:
rmdir用于删除空目录，当目录内有其他文件时无法删除
rm用于删除文件，除只读文件，其他文件删除时不提示任何信息，设置-i时会提示是否删除，设置-f时会避免这种交互式操作，默认自动为y，设置-r时，会递归的删除目录下所有的文件。

> >>:
输出重定向，即将得到的信息写入其他地方，>覆盖输出，>>追加输出，不会覆盖原始文件内容，会在原始内容后追加信息。
< <<:
输入重定向，即将其他地方的信息导入进来，包括键盘，例cat << END >hello
|:
管道，不能单独使用，主要是辅助作用，通过竖线，将一条命令的输出连接到另一条命令的输入
过滤：例 ls | grep y
1.以管道作为分界线，前面的命令有个输出，后面需要先输入，然后再过滤，最后再输出，通俗的讲就是管道前面的输出就是后面的指令的输入。
2.grep 指令：主要用于过滤
 
date:
表示操作时间和日期（读取、设置）: 
获取当前时间：date /date +%F/date "+%Y-%m-%d"/date "+%F %T"/date "+%Y-%m-%d %H:%M:%S" 引号表示让“年月日与时分秒”成为一个不可分割的整体
获取之前或者之后的某个时间（备份）：
date -d "-/+1 day/month/year" "+%Y-%m-%d %H:%M:%S"

cal:
用来操作日历，1.date 获取当前月份日历 2.date -1 获取当前一个月的日历 3.date -3 表示输出上一个月+本月+下一个月的日历 4.cal -y 年份，获取某一年份的日历

hostname:
操作服务器的主机名（读取、设置【单次设置，重启失效】)
hostname 表示输出完整的主机名  -f 表示输出当前主机名中的FQDN（全限定域名）

su:
查看目录的真实大小，du -sh 目录路径 -s 只显示汇总大小；-h 表示以高可读性的形式进行显示

service:
用于控制一些软件的服务启动/停止/重启
	service 服务名 start/stop/restart

ifconfig:
获取网卡信息

uptime:
获取计算机从开机到目前的持续时间

用户管理：
groupadd：
新建用户组 需要权限sudo
-g 类似用户添加中的"-u"，表示选择自己设置一个用户组ID

groupmod:
修改用户组
-g:修改用户组ID
-n:修改用户组名

groupdel:
删除用户组
当如果需要删除一个组，但是这个组是某个用户的主组时，则不允许删除，如果确实需要删除，需要把其用户移出

useradd：
新建用户 需要权限sudo 新建后最好设置用户密码 passwd 需要权限sudo，
-g 指定用户所属的组，
-s 指定用户所用的Shell 
-G 指定用户的用户附加组，选项可以使用户组的id，也可以是组名 
-u uid,用户的id(用户的标识符），系统默认会从500之后按顺序分配uid，如果不想使用系统分配的，可以通过该选项自定义
-c 添加注释
验证是否成功：
	a.验证/etc/passwd的最后一行
	b.验证是否存在家目录

history:
记录用户的操作 -n 展示出最近几条

userdel:
删除用户账号
-r 表示删除用户的同时，删除其家目录
已经登录的用户删除会显示删除失败，没有登录的用户可以正常删除，解决办法：kill对应用户的全部进程

usermod:
用户账号管理 
-d 修改用户主目录 
-e 修改账号有限期限
-g 修改用户所属的组，
-s 修改用户所用的Shell 
-G 修改用户的用户附加组，选项可以使用户组的id，也可以是组名 
-u uid,用户的id(用户的标识符），系统默认会从500之后按顺序分配uid，如果不想使用系统分配的，可以通过该选项自定义
-c 修改注释
-l 修改用户名

passwd:
设置密码，linux不允许没有密码的用户登录到系统，因此前面创建的用户目前都处于锁定状态，需要设置密码之后才能登录计算机。例 passwd 用户名

id:
查看用户信息，即GID（用户组id) UID（用户id)

su:
用户之间进行切换，exit退出账号

sudo:
提高用户权限至root，默认维持五分钟

所有与用户操作的命令（除passwd外）只有root超级管理员有权限执行


文件和目录的权限：
Linux中为三种人设置了权限，文件所有者（属主）、文件属组用户、其他人，分别有三种权限：读取（r）、写入(w)、执行（x)。
chown:
修改文件或目录的所有权，包括文件所有者与文件属组用户，即sudo chown xc:workgroup days，冒号前面表示文件所有者，后面表示文件属组用户，-R表示修改目录
chgrp:
只修改文件或目录的文件属组用户，-R表示修改目录
chomd:
改变一个文件的权限，格式为：用户组+/-权限 还可用八进制表示权限，即4表示r 2表示w 1表示x 如chmod 711 days.
ln:
建立符号链接 ln -s days my_days my_days即为符号链接



磁盘管理：
df:
查看磁盘信息，-h 提高可读性
free:
查看内存使用信息，-m表示以MB为单位
wc:
统计文件内容信息（行数、单词数、字节数） -l -w -c
mount:
挂载文件，例：sudo mount /dev/sda3 /mnt/vista
umount:
卸载文件，例：sudo umount -r /dev/sda2 -r表示在无法卸载的情况下，以只读方式重新载入
fsck:
检查和修复文件系统
mkfs:
新建文件系统，常用的文件系统有 minix ext2 ext3 msdos
gzip:
压缩文件到.gz类型
-d 解压缩 -l 查看压缩效果 -tv 提示压缩成功
gunzip:
解压缩.gz类型的压缩文件
bzip2:
更高的压缩率，使用方法与gzip基本一致，获得.bz2类型的压缩文件
rar:
rar x 解压缩rar类型的压缩文件
tar:
将文件打包，-c 指导tar创建归档文件 -v用于显示命令执行过程 -f 用于指定归档文件的文件名 -x 解开归档文件 -w用于每次将单个文件加入（或抽出）归档文件时征求用户的意见 -z 自动调用gzip完成相关操作（压缩或者解压缩）
例： tar -czvf shell.tar.gz shell/ 打包并压缩到shell目录下
	tar -xzvf shell.tar.gz 解压缩并解档文件
dd:
转移文件，刻录光盘，使用if选项指定输入端的文件系统，of选项则指定其输出端，例：dd  if = /dev/cdrom of=CD.iso 将一张CD完整的转储为iso镜像文件
dump:
备份文件系统 0-9表示备份等级，0表示完全备份 9为最小增量备份 -u指定更新文件 -f指定用于存放备份的设备 例： dump -3u -f /dev/nst0 /web 从web到nst0的三级备份，rdump 远程备份
restore:
恢复 -i 交互式的恢复单个文件和目录， -f 用于指定存放备份的设备 例：restore -i -f /dev/sdb2，rrestore 远程恢复
corn:
定时备份


进程管理：

ps:
监视进程，ps aux 查看进程的基本信息 ps lax 查看进程的父进程和谦让度（优先级）
-e:显示全部的进程信息，-f显示全部的列：
UID，该进程执行的用户id
PID：该进程的id
PPID：该进程的父进程id,如果一个程序的父级进程找不到，该程序的进程称之为僵尸进程
c:cpu的占用率，百分比形式
STIME：进程的启动时间
TTY：终端设备，发起该进程的设备识别符号，如果显示“？”则表示该进程并不是由终端设备发起
TIME：进程的执行时间
CMD：该进程的名称或者对应的路径
搜索进程：ps -ef | grep 进程名称
top：
即时跟踪进程信息，每几秒刷新一次
表头含义：
PID：进程id
USER：该进程对应的用户
PR：优先级
VIRT:虚拟内存
RES：常驻内存
SHR：共享内存
	计算一个进程实际使用的内存 = 常驻内存（RES） - 共享内存（SHR)
S:表示进行的状态（S，睡眠；R，运行）
%CPU：表示CPU的占用百分比
%MEM：表示内存的占用百分比
TIME+：执行的时间
COMMAND：进程的名称或路径
快捷键：
M：表示将结果按内存占用的百分比降序排列
P：表示将结果按CPU占用的百分比降序排序
1：当服务器拥有多个cpu的时候，切换是否显示每一个cpu的详细信息

lsof:
查看占用文件的进程
kill：
向进程发送信号，其中KILL为终止进程 例：kill -KILL pid  pid表示进程的id号
killall:
与kill命令作用相似但是比kill更加好用，killall 进程名称 如killall httpd
nice:
在启动程序时设置其谦让度，通过接收-n参数增加进程的谦让度值，例 nice -n 2 bc
renice：
在进程运行时调整其谦让度



VIM三种模式：
vim中存在三种模式：命令模式、编辑模式（输入模式）、末行模式（尾行模式）。
命令模式：在该模式下是不能对文件直接编辑，可以输入快捷键进行一些操作（删除行、复制行、移动光标、粘贴等），打开文件之后默认进入的模式；
编辑模式：在该模式下可以对文件的内容进行编辑；
末行模式：可以在末行输入命令来对文件进行操作（搜索、替换、保存、退出、撤销、高亮等）；

vim的打开文件的方式：
1. vim 文件路径		作用：打开指定文件
2. vim + 数字  文件的路径	作用：打开指定的文件，并且将光标移动到指定行
3. vim + /关键词  文件的路径	作用：打开指定文件，并且高亮显示关键词
4. vim 文件路径1 文件路径2 文件路径3	作用：同时打开多个文件

命令模式：
一、光标移动操作：
1.光标移动到行首： shift + 6 或  ^(T字母上面的6，非小键盘上的6）
2.光标移动到行尾： shift + 4 或  $(R字母上面的4，非小键盘上的4）
3.光标移动到首行：gg
4.光标移动到末行：G
5.翻屏：向上翻屏：ctrl + b(before) / PgUb   向下翻屏：ctrl + f(after) / PgDn
二、复制操作：
1.复制光标所在行： 
按键：yy	 在想要粘贴的地方：p
2.以光标所在行为准（包含当前行），向下复制指定的行数
按键：数字 yy
3.可视化复制：
按键： ctrl + v 然后按下方向键来选中需要复制的区块，按下yy键进行复制，最后按下p键粘贴
三、剪切/删除：
1.剪切/删除光标所在行：
按键：dd (删除之后下一行上移）
2.剪切/删除包括光标在内的指定行数
按键：数字 dd
3.剪切/删除光标所在行，但是删除后不上移，删除之后当前行变成空白行
按键：D
四、撤销：
按键：  u			(undo)
恢复： ctrl + r	恢复（取消）之前的撤销操作
五、光标的快速移动
1.快速将光标移动到指定的行
按键：数字 G
2.以当前光标为准向上/向下移动n行
按键：数字 ↑   数字↓
3.以当前光标为准向左/向右移动n字符
按键：数字← 数字→
4.末行模式下的快速移动方式：移动到指定行
按键：：行数

末行模式：
进入方式：由命令模式进入，按下”：“即可进入
退出方式：
	a.按下esc键
	b.连按两下esc键
	c.删除末行全部输入字符
一、保存操作：
输入：“：w”	保存文件
输入：“：w 路径”	另存为
二、退出：
输入：“：q”	退出文件
三、保存并退出：
输入：“：wq”	保存并退出
四、强制退出：
输入：“：q!”	表示强制退出，修改操作不做保存
五、调用外部命令：
输入：“：！外部命令”
六、搜索/查找
输入：“/关键词”	在搜索结果中切换上/下一个结果：N/n	（next)
取消高亮，输入：“：nohl”
七、替换
输入:	“：s/搜索的关键词/新的内容”	替换光标所在行的第一处符合条件的内容
	“：s/搜索的关键词/新的内容/g"	替换光标所在行的全部符合条件的内容
	”：%s/搜索的关键词/新的内容"	替换整个文档中每行第一个符合条件的内容
	“：%s/搜索的关键词/新的内容/g"	替换整个文档的符合条件的内容
%：表示整个文件 g表示全局（global)
八、显示行号：
输入：":set un"[number]	取消：":set nonu"
九：切换文件：
查看打开文件的名字：":files"
切换文件：
	1.通过指定文件名来切换到文件	":open 文件名"
	2.切换上一个文件/下一个文件	上一个 ":bp"(back prev) 下一个"bn"(back next)


编辑模式：
编辑模式：i(在光标所在位置前进行插入） a(在光标所在位置后进行插入）S（删除光标所在行并开始插入）
退出编辑模式:esc
命令模式下移动光标：H、J、K、L 分别表示左、上、下、右
查找：/wednesday 查找单词wednesday
忽略大小写：  :set ignorecase
取消忽略大小写： :set noignorecase
替换字符串： ：[range]s/pattern/string/[c,e,g,i] 例：  ：%s/monday/tunday/cgi
range: 1,4表示从第一行到第四行  1,$表示从第一行到最后一行 %表示全文
[c,e,g,i]: c:每次替换前询问；e:不显示错误信息；g:替换一行中的所有匹配项【通常需要用】 i:不区分大小写
计算器的调用：
编辑模式中，按下按键："ctrl R" 输入"="此时光标会变到最后一行，最后按下回车就行

编程模式：
：syntax on 设置语法高亮
：set autoindent 设置自动缩进
：set shiftwidth=4 设置tab为四个空格
一般将这三个配置写入配置文件 /etc/vim/vimrc文件中
调试：
gdb ,打开编译的二进制文件进行调试，例：gdb a.out,进入gdb模式
list:查看程序的源码
search:定位某条特定的语句，向文件尾查找
reverse-search:向文件头查找特定语句
break 设置断点
clear n 删除某一行断点
run 运行程序
next 下一步，单步执行
step 下一步，能进入调用程序内部
continue 继续运行程序
quit 退出调试


快捷键：
在命令行中快速删除光标前/后的内容？
前：ctrl + u
后：ctrl + k

vim的配置：
	a.在文件打开的时候在末行模式下输入的配置（临时）
	b.个人配置文件（~/.vimrc)
	c.全局配置文件（vim自带，/etc/vimrc)

别名机制：
通过”映射“，创建一些属于自己的自定义命令
别名机制依靠一个别名映射文件：~/.bashrc
如果想新创建的命令生效，必须要重新登录当前用户

退出方式：
保存退出：":x"
1.":x"在文件没有修改的情况下，表示直接退出，在文件修改的情况下表示保存并退出
2.如果文件没有被修改，但是使用wq进行退出的话，则文件的修改时间会更新，但是如果文件没有被修改，使用x进行退出的话，则文件修改时间不会被更新
3.建议使用“：x”来进行对文件的保存退出，但是“：X”是加密文件，需要注意